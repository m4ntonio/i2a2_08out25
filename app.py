import streamlit as st
import pandas as pd
import google.generativeai as genai
import re
import matplotlib.pyplot as plt
import seaborn as sns
from io import StringIO
import sys
import io
import os
import json
from datetime import datetime

# ================================
# CONFIGURA√á√ÉO DA P√ÅGINA
# ================================
st.set_page_config(
    page_title="DataAgent EDA",
    page_icon="üïµÔ∏è",
    layout="wide",
    menu_items={
        'Get Help': 'https://docs.streamlit.io/',
        'Report a bug': "mailto:warioabox-suporte@yahoo.com",
        'About': """
        # üïµÔ∏è DataAgent EDA

        ## Agente Inteligente de An√°lise de Dados

        Fa√ßa perguntas em portugu√™s sobre seus arquivos CSV, Excel ou JSON e receba respostas com gr√°ficos, estat√≠sticas e c√≥digo gerado por IA.

        **Vers√£o:** 1.0.9

        **¬©Ô∏é MAO 2025**
        """
    }
)

# --- INICIALIZA√á√ÉO DO BANCO DE DADOS ---
st.session_state.setdefault("db_ready", False)

if "database" not in st.session_state:
    if os.path.exists("database.py"):
        try:
            import database
            database.init_db()
            st.session_state.database = database
            st.session_state.db_ready = True
        except Exception as e:
            st.error("‚ùå Erro ao carregar m√≥dulo 'database.py'")
            st.exception(e)
    else:
        st.warning("‚ö†Ô∏è Arquivo `database.py` n√£o encontrado. O hist√≥rico n√£o ser√° salvo.")
        st.session_state.db_ready = False

# --- CONFIGURA√á√ÉO DO GEMINI ---
try:
    genai.configure(api_key=st.secrets["GOOGLE_API_KEY"])
    model = genai.GenerativeModel('gemini-flash-latest')
except Exception as e:
    st.error("‚ùå Erro na API Gemini. Confira `secrets.toml`.")
    st.stop()

# --- EXECU√á√ÉO SEGURA DE C√ìDIGO ---
def execute_safe_code(code, df):
    SAFE_GLOBALS = {
        "__builtins__": {k: __builtins__[k] for k in ["print", "len", "sum", "min", "max", "abs", "round", "int", "float"] if k in __builtins__},
        "pd": pd,
        "df": df,
        "plt": plt,
        "sns": sns
    }
    local_vars = {"fig": None, "ax": None}
    old_stdout = sys.stdout
    sys.stdout = captured = StringIO()
    fig, ax = plt.subplots(figsize=(8, 5))
    local_vars["fig"], local_vars["ax"] = fig, ax

    prohibited = ["import", "open(", "exec(", "eval(", "os.", "sys."]
    if any(cmd in code.lower() for cmd in prohibited):
        sys.stdout = old_stdout
        plt.close(fig)
        return None, "üö´ Comando proibido detectado."

    try:
        exec(code, SAFE_GLOBALS, local_vars)
        output = captured.getvalue()
        if ax.has_data():
            return fig, output
        else:
            plt.close(fig)
            return None, output
    except Exception as e:
        plt.close(fig)
        return None, f"‚ùå Erro: {e}"
    finally:
        sys.stdout = old_stdout

# --- INICIALIZA√á√ÉO DA SESS√ÉO ---
if "messages" not in st.session_state:
    st.session_state.messages = []
if "df" not in st.session_state:
    st.session_state.df = None
if "file_name" not in st.session_state:
    st.session_state.file_name = None

# ================================
# SIDEBAR: PAINEL DE INFORMA√á√ïES
# ================================
st.sidebar.markdown(
    """
    <div style='
        font-size:24px;
        color:#1abc9c;
        font-weight:bold;
        text-shadow: 2px 1.7px 0px rgba(0,0,0,0.6);
    '>
        <h2 style='color:#1abc9c; font-size: 30px;'>üïµÔ∏è DataAgent</h2>
    </div>
    """,
    unsafe_allow_html=True
)

# Estado do Sistema
st.sidebar.markdown("### üß© Estado do Sistema")
if st.session_state.get("db_ready"):
    st.sidebar.success("‚úÖ Banco: Ativo")
    st.sidebar.caption("Auto-salvamento habilitado")
else:
    st.sidebar.warning("‚ö†Ô∏è Banco: Inativo")
    st.sidebar.caption("Verifique database.py")

st.sidebar.divider()

# Hist√≥rico de An√°lises
st.sidebar.markdown("### ‚è≥ Hist√≥rico de An√°lises")
if st.session_state.get("db_ready"):
    try:
        sessions = st.session_state.database.list_all_sessions()
        if sessions:
            for item in sessions[:5]:
                if len(item) == 4:
                    session_id, file_name, start_time, last_update = item
                    date = last_update.split("T")[0]
                    if st.sidebar.button(f"üìÇ {file_name} ({date})", key=f"load_{session_id}"):
                        saved_msgs = st.session_state.database.load_session_by_filename(file_name)
                        if saved_msgs:
                            st.session_state.messages = saved_msgs
                            st.session_state.file_name = file_name
                            st.success(f"Hist√≥rico carregado: {file_name}")
                            st.sidebar.caption(f"üí¨ {len(saved_msgs)} intera√ß√µes")
                else:
                    st.sidebar.warning("‚ö†Ô∏è Dados inconsistentes no hist√≥rico")
        else:
            st.sidebar.caption("Nenhum hist√≥rico ainda.")
    except Exception as e:
        st.sidebar.error("‚ùå Falha ao carregar hist√≥rico")
        st.sidebar.exception(e)
else:
    st.sidebar.info("Sem hist√≥rico dispon√≠vel")

if st.session_state.get("db_ready"):
    try:
        sessions = st.session_state.database.list_all_sessions()
        if len(sessions) > 0:
            if st.sidebar.button("üßπ Limpar Hist√≥rico", key="clear_history"):
                os.remove("mydatabase.db")
                st.session_state.messages = []
                st.success("‚úÖ Hist√≥rico limpo!")
                st.rerun()
        else:
            st.sidebar.button("üßπ Limpar Hist√≥rico", disabled=True, help="Nada para limpar")
    except:
        pass

# ================================
# T√çTULO PRINCIPAL
# ================================
st.markdown(
    """
    <div style='
        font-size:24px;
        color:#1abc9c;
        font-weight:bold;
        text-shadow: 2px 2px 0px rgba(0,0,0,0.7);
    '>
        <h1 style='color:#1abc9c'>üïµÔ∏è DataAgent</h1>
    </div>
    """,
    unsafe_allow_html=True
)
st.markdown("<p><i>An√°lise de dados com intelig√™ncia artificial</i></p>", unsafe_allow_html=True)

# ================================
# UPLOAD DO ARQUIVO
# ================================
uploaded_file = st.file_uploader("Carregue um arquivo", type=["csv", "xlsx", "json"])

if uploaded_file is not None and uploaded_file.name != st.session_state.file_name:
    try:
        if uploaded_file.name.endswith(".csv"):
            df = pd.read_csv(uploaded_file)
        elif uploaded_file.name.endswith(".xlsx"):
            df = pd.read_excel(uploaded_file)
        elif uploaded_file.name.endswith(".json"):
            df = pd.read_json(uploaded_file)

        st.session_state.df = df
        st.session_state.file_name = uploaded_file.name

        # Carrega hist√≥rico do banco se dispon√≠vel
        if st.session_state.db_ready:
            saved_messages = st.session_state.database.load_session_by_filename(uploaded_file.name)
            if saved_messages:
                st.session_state.messages = saved_messages
                st.info("üß† Hist√≥rico anterior restaurado!")
            else:
                st.session_state.messages = []
        else:
            st.session_state.messages = []

        st.rerun()

    except Exception as e:
        st.error(f"Erro ao ler o arquivo: {e}")

# ================================
# MOSTRA DADOS E PERGUNTA
# ================================
if st.session_state.df is not None:
    df = st.session_state.df
    st.subheader("üìã Amostra dos Dados")
    st.dataframe(df.head(5))
    st.caption(f"üî¢ {df.shape[0]} linhas √ó {df.shape[1]} colunas")

    user_question = st.text_input("Pergunte algo sobre os dados:", key="user_input")

    if st.button("üîç Analisar") and user_question.strip():
        column_names = ", ".join(df.columns)

        # Limita o hist√≥rico √†s √∫ltimas 6 mensagens
        √∫ltimas_mensagens = st.session_state.messages[-6:]
        history = "\n".join([f"{m['role']}: {m['content']}" for m in √∫ltimas_mensagens])

        prompt = f"""
        Voc√™ √© um assistente especialista em an√°lise de dados com Python criado por MAO, mas tamb√©m pode conversar de forma amig√°vel. O DataFrame 'df' tem colunas: {column_names}.
        RESPONDA SEMPRE EM PORTUGU√äS DO BRASIL.

        REGRAS:
         1. N√£o use 'import', 'open(', 'exec(', 'eval('.
         2. Use diretamente 'df'.
         3. As bibliotecas 'pandas', 'matplotlib.pyplot', 'seaborn' j√° est√£o importadas e prontas para uso.
         4. Para gr√°ficos, use o eixo 'ax': sns.histplot(data=df, x='col', ax=ax) ou df.plot(ax=ax).
         5. Configure t√≠tulos com ax.set_title(), xlabel, ylabel.
         6. Coloque TODO o c√≥digo em um √∫nico bloco ```python.
         7. Seja claro e direto. Evite rodeios.
         8. Se for uma sauda√ß√£o (ol√°, oi, bom dia, boa tarde, etc.), responda de forma calorosa e amig√°vel
         9. Se for uma pergunta geral, responda brevemente mas sempre mencione seu prop√≥sito principal
        10. Se for sobre an√°lise de dados mas sem arquivo carregado, explique que ele precisa fazer upload primeiro
        11. Se n√£o souber responder, diga que n√£o √© poss√≠vel.

        Hist√≥rico:
        {history}

        Pergunta:
        {user_question}
        """

        with st.spinner("Processando..."):
            try:
                response = model.generate_content(prompt)
                answer = response.text or "Sem resposta."
            except Exception as e:
                st.error("‚ùå Falha ao conectar ao Gemini. Tente novamente.")
                st.stop()

            st.session_state.messages.append({"role": "assistant", "content": answer})

            # Salva automaticamente no SQLite
            if st.session_state.db_ready and st.session_state.file_name:
                st.session_state.database.save_session(
                    file_name=st.session_state.file_name,
                    messages=st.session_state.messages
                )

            with st.chat_message("assistant"):
                st.markdown(answer)
                code_match = re.search(r"```python\n(.*?)```", answer, re.DOTALL)
                if code_match:
                    code = code_match.group(1).strip()
                    with st.expander("Ver c√≥digo"):
                        st.code(code, language="python")
                    fig, text_result = execute_safe_code(code, df)
                    st.subheader("Resultado:")
                    if text_result:
                        st.text(text_result)
                    if fig:
                        st.pyplot(fig)
                        buf = io.BytesIO()
                        fig.savefig(buf, format="png", bbox_inches="tight")
                        buf.seek(0)
                        st.download_button("‚¨áÔ∏è Baixar Gr√°fico", buf, "grafico.png", "image/png")
                else:
                    st.info("Nenhum c√≥digo foi gerado.")

else:
    st.info("‚¨ÜÔ∏è Carregue um arquivo para come√ßar.")